#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import { getSubscription } from '../lib/lemonsqueezy-service'

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkSubscriptions() {
  console.log('üîç Verificando suscripciones...')
  
  try {
    // Obtener todas las suscripciones activas
    const { data: subscriptions, error } = await supabase
      .from('user_subscriptions')
      .select('*')
      .eq('status', 'active')
    
    if (error) {
      console.error('‚ùå Error al obtener suscripciones:', error)
      return
    }
    
    console.log(`üìä Encontradas ${subscriptions.length} suscripciones activas`)
    
    let validCount = 0
    let invalidCount = 0
    let testModeCount = 0
    
    for (const subscription of subscriptions) {
      console.log(`\nüîç Verificando suscripci√≥n: ${subscription.subscription_id}`)
      
      try {
        const lemonSqueezySub = await getSubscription(subscription.subscription_id)
        
        if (!lemonSqueezySub) {
          console.log(`‚ùå Suscripci√≥n no encontrada en LemonSqueezy: ${subscription.subscription_id}`)
          
          // Verificar si estamos en modo de desarrollo
          const isDevelopment = process.env.NODE_ENV !== "production"
          
          if (isDevelopment) {
            console.log(`üß™ Marcando como suscripci√≥n de prueba: ${subscription.subscription_id}`)
            testModeCount++
            
            // Marcar como cancelada y agregar nota sobre modo de prueba
            await supabase
              .from('user_subscriptions')
              .update({ 
                status: 'cancelled',
                updated_at: new Date().toISOString(),
                notes: 'Suscripci√≥n de prueba en modo desarrollo - portal de facturaci√≥n no disponible'
              })
              .eq('subscription_id', subscription.subscription_id)
          } else {
            console.log(`‚ö†Ô∏è Marcando como inv√°lida: ${subscription.subscription_id}`)
            invalidCount++
            
            // Marcar como cancelada
            await supabase
              .from('user_subscriptions')
              .update({ 
                status: 'cancelled',
                updated_at: new Date().toISOString(),
                notes: 'Suscripci√≥n no encontrada en LemonSqueezy - requiere atenci√≥n del soporte'
              })
              .eq('subscription_id', subscription.subscription_id)
          }
        } else {
          console.log(`‚úÖ Suscripci√≥n v√°lida: ${subscription.subscription_id}`)
          validCount++
        }
      } catch (error) {
        console.error(`‚ùå Error al verificar suscripci√≥n ${subscription.subscription_id}:`, error)
        invalidCount++
      }
    }
    
    console.log('\nüìà Resumen:')
    console.log(`‚úÖ Suscripciones v√°lidas: ${validCount}`)
    console.log(`‚ùå Suscripciones inv√°lidas: ${invalidCount}`)
    console.log(`üß™ Suscripciones de prueba limpiadas: ${testModeCount}`)
    
    if (invalidCount > 0 || testModeCount > 0) {
      console.log('\nüí° Recomendaciones:')
      if (testModeCount > 0) {
        console.log(`- ${testModeCount} suscripciones de prueba fueron marcadas como canceladas`)
        console.log('- Los usuarios deber√≠an crear nuevas suscripciones en modo de producci√≥n')
      }
      if (invalidCount > 0) {
        console.log(`- ${invalidCount} suscripciones inv√°lidas requieren atenci√≥n del soporte`)
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error)
  }
}

// Funci√≥n espec√≠fica para limpiar solo suscripciones de prueba
async function cleanTestSubscriptions() {
  console.log('üß™ Limpiando suscripciones de prueba...')
  
  try {
    const { data: subscriptions, error } = await supabase
      .from('user_subscriptions')
      .select('*')
      .eq('status', 'active')
    
    if (error) {
      console.error('‚ùå Error al obtener suscripciones:', error)
      return
    }
    
    let cleanedCount = 0
    
    for (const subscription of subscriptions) {
      try {
        const lemonSqueezySub = await getSubscription(subscription.subscription_id)
        
        if (!lemonSqueezySub) {
          console.log(`üß™ Limpiando suscripci√≥n de prueba: ${subscription.subscription_id}`)
          
          await supabase
            .from('user_subscriptions')
            .update({ 
              status: 'cancelled',
              updated_at: new Date().toISOString(),
              notes: 'Suscripci√≥n de prueba limpiada autom√°ticamente'
            })
            .eq('subscription_id', subscription.subscription_id)
          
          cleanedCount++
        }
      } catch (error) {
        console.error(`‚ùå Error al verificar suscripci√≥n ${subscription.subscription_id}:`, error)
      }
    }
    
    console.log(`‚úÖ ${cleanedCount} suscripciones de prueba limpiadas`)
    
  } catch (error) {
    console.error('‚ùå Error general:', error)
  }
}

// Ejecutar seg√∫n el argumento pasado
const command = process.argv[2]

if (command === 'clean-test') {
  cleanTestSubscriptions()
} else {
  checkSubscriptions()
} 
checkSubscriptions() 